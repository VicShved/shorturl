// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "security": [
                    {
                        "AuthorizationCook": []
                    }
                ],
                "description": "Запрос на получение длинного url из короткого в header Location",
                "consumes": [
                    "plain/text"
                ],
                "produces": [
                    "plain/text"
                ],
                "tags": [
                    ""
                ],
                "summary": "Получение url",
                "operationId": "HandleGet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Короткий url",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Temporary Redirect"
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "410": {
                        "description": "Удален",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AuthorizationCook": []
                    }
                ],
                "description": "Запрос на сохранение длинного url",
                "consumes": [
                    "plain/text"
                ],
                "produces": [
                    "plain/text"
                ],
                "tags": [
                    ""
                ],
                "summary": "Сохранение url",
                "operationId": "HandlePost",
                "parameters": [
                    {
                        "description": "Исходный url",
                        "name": "url",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Уже есть такой url",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/shorten": {
            "post": {
                "security": [
                    {
                        "AuthorizationCook": []
                    }
                ],
                "description": "Запрос на сохранение длинного url",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Сохранение url",
                "operationId": "HandlePostJSON",
                "parameters": [
                    {
                        "description": "Исходный url",
                        "name": "url",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.reqJSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.respJSON"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Ошибка авторизации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Уже есть такой url",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/shorten/batch": {
            "post": {
                "security": [
                    {
                        "AuthorizationCook": []
                    }
                ],
                "description": "Запрос на сохранение группы длинных url",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Сохранение группы url",
                "operationId": "HandleBatchPOST",
                "parameters": [
                    {
                        "description": "Исходные urls",
                        "name": "urls",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.BatchReqJSON"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/service.BatchRespJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/user/urls": {
            "get": {
                "security": [
                    {
                        "AuthorizationCook": []
                    }
                ],
                "description": "Запрос на все urls пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Все urls пользователя",
                "operationId": "GetUserURLs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.UserURLRespJSON"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AuthorizationCook": []
                    }
                ],
                "description": "Запрос на удаление urls пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Удаление url пользователя",
                "operationId": "DelUserURLs",
                "parameters": [
                    {
                        "description": "urls на удаление",
                        "name": "urls",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "security": [
                    {
                        "AuthorizationCook": []
                    }
                ],
                "description": "Запрос на проверку работы БД",
                "tags": [
                    ""
                ],
                "summary": "Проверка БД",
                "operationId": "PingDB",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.reqJSON": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "handler.respJSON": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            }
        },
        "service.BatchReqJSON": {
            "type": "object",
            "properties": {
                "correlation_id": {
                    "type": "string"
                },
                "original_url": {
                    "type": "string"
                }
            }
        },
        "service.BatchRespJSON": {
            "type": "object",
            "properties": {
                "correlation_id": {
                    "type": "string"
                },
                "short_url": {
                    "type": "string"
                }
            }
        },
        "service.UserURLRespJSON": {
            "type": "object",
            "properties": {
                "original_url": {
                    "type": "string"
                },
                "short_url": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
